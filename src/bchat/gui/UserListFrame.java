/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bchat.gui;

import bchat.controllers.UserController;
import bchat.utilities.UserListRenderer;
import bchat.entities.UserImp;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.rmi.RemoteException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.plaf.basic.BasicInternalFrameUI;

/**
 *
 * @author Blacky
 */
public class UserListFrame extends javax.swing.JInternalFrame {

    /**
     * Creates new form LoginFrame
     */
    public DefaultListModel<UserImp> listModel = new DefaultListModel<>();

    public UserListFrame() {
        initComponents();

        filterCombo.setVisible(false);

        // remove the north pane of this frame
        BasicInternalFrameUI bi = (BasicInternalFrameUI) this.getUI();
        bi.setNorthPane(null);
        setLocation(0, 0);

        usersJlist.setCellRenderer(new UserListRenderer());

        usersJlist.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2 && !e.isConsumed()) {
                    e.consume();

                    if (MainUser.loggedIN == false) {
                        return;
                    }

                    System.out.println(usersJlist.getSelectedIndex());

                    UserImp remoteUser = usersJlist.getSelectedValue();
                    System.out.println("remoteUserID: " + remoteUser.getIduser());

                    UserChatFrame cFrame = MainUser.userChatFrames.get(remoteUser.getIduser());

                    // show components
                    cFrame.profile.setVisible(true);
                    cFrame.remoteName.setText(remoteUser.getFirstName() + " " + remoteUser.getLastName());
                    cFrame.remoteName.setVisible(true);
                    cFrame.chatArea.setVisible(true);
                    cFrame.messageText.setVisible(true);
                    cFrame.sendMessageBtn.setVisible(true);

                    cFrame.setVisible(true);
                    cFrame.moveToFront();
                }
            }
        });

    }

    public void addToJList(UserImp user) {
        listModel.addElement(user);
//        usersJlist.validate();
    }

    public void clearJList() {
        listModel.clear();
//        usersJlist.validate();
    }

    public void refresh() {
        // add then remove something from listmodel to refresh
        UserImp tmp = null;
        listModel.addElement(tmp);
        listModel.removeElement(tmp);
        usersJlist.validate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        usersJlist = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        filterBtn = new javax.swing.JButton();
        filterCombo = new javax.swing.JComboBox<>();

        setBorder(null);
        setEnabled(false);

        jPanel1.setBackground(new java.awt.Color(5, 100, 153));
        jPanel1.setPreferredSize(new java.awt.Dimension(220, 410));

        jScrollPane1.setBorder(null);

        usersJlist.setBackground(new java.awt.Color(5, 100, 153));
        usersJlist.setFont(new java.awt.Font("Arial Rounded MT Bold", 0, 18)); // NOI18N
        usersJlist.setForeground(new java.awt.Color(255, 255, 255));
        usersJlist.setModel(listModel);
        usersJlist.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        usersJlist.setToolTipText("Double-Click to Select Item");
        jScrollPane1.setViewportView(usersJlist);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Chats");

        filterBtn.setBackground(new java.awt.Color(5, 100, 153));
        filterBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bchat/res/filter.png"))); // NOI18N
        filterBtn.setBorder(null);
        filterBtn.setBorderPainted(false);
        filterBtn.setContentAreaFilled(false);
        filterBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterBtnActionPerformed(evt);
            }
        });

        filterCombo.setBackground(new java.awt.Color(5, 100, 153));
        filterCombo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        filterCombo.setForeground(new java.awt.Color(255, 255, 255));
        filterCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Online", "Offline" }));
        filterCombo.setBorder(null);
        filterCombo.setOpaque(false);
        filterCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterComboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addComponent(filterCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(filterBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(25, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(filterBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filterCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void filterBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterBtnActionPerformed
        if (filterCombo.isVisible()) {
            filterCombo.setVisible(false);
        } else {
            filterCombo.setVisible(true);
        }
    }//GEN-LAST:event_filterBtnActionPerformed

    private void filterComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterComboActionPerformed
        String selected = (String) filterCombo.getSelectedItem();
        MainUser.allUsersFrame.clearJList();
        try {
            ArrayList<Integer> onlineUsersIDs = MainUser.proxy.getOnlineUsersIDs();
            switch (selected) {
                case "All":
                    for (UserImp remoteUser : UserController.INSTANCE.findAll()) {
                        // if current user -> don't add to list
                        if (MainUser.user.getIduser() != remoteUser.getIduser()) {
                            // add remoteUser to Jlist
                            MainUser.allUsersFrame.addToJList(remoteUser);
                        }
                    }
                    break;

                case "Online":
                    for (UserImp remoteUser : UserController.INSTANCE.findAll()) {
                        // if current user -> don't add to list
                        if (onlineUsersIDs.contains(remoteUser.getIduser()) && MainUser.user.getIduser() != remoteUser.getIduser()) {
                            // add remoteUser to Jlist
                            MainUser.allUsersFrame.addToJList(remoteUser);
                        }
                    }
                    break;

                case "Offline":
                    for (UserImp remoteUser : UserController.INSTANCE.findAll()) {
                        // if current user -> don't add to list
                        if (!onlineUsersIDs.contains(remoteUser.getIduser())) {
                            // add remoteUser to Jlist
                            MainUser.allUsersFrame.addToJList(remoteUser);
                        }
                    }
                    break;
            }

        } catch (RemoteException | SQLException ex) {
            System.out.println(ex.getMessage());
        }

    }//GEN-LAST:event_filterComboActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton filterBtn;
    private javax.swing.JComboBox<String> filterCombo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    public javax.swing.JList<UserImp> usersJlist;
    // End of variables declaration//GEN-END:variables
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bchat.gui;

import bchat.controllers.GroupController;
import bchat.utilities.MyColors;
import bchat.controllers.UserController;
import bchat.controllers.UserGroupController;
import bchat.entities.GroupImp;
import bchat.entities.IGroup;
import bchat.entities.IServer;
import bchat.entities.UserImp;
import bchat.utilities.ParallelTask;
import java.awt.Color;
import java.awt.Window;
import java.net.MalformedURLException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.sql.SQLException;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.plaf.basic.BasicInternalFrameUI;

/**
 *
 * @author Blacky
 */
public class LoginFrame extends javax.swing.JInternalFrame {

    /**
     * Creates new form LoginFrame
     */
    public LoginFrame() {
        initComponents();

        // remove the north pane of this frame
        BasicInternalFrameUI bi = (BasicInternalFrameUI) this.getUI();
        bi.setNorthPane(null);

        // change the color of jOptionPane
        UIManager.put("OptionPane.background", new Color(5, 100, 153));
        UIManager.getLookAndFeelDefaults().put("Panel.background", new Color(5, 100, 153));
        UIManager.put("control", new Color(5, 100, 153));
        UIManager.put("OptionPane.messageForeground", Color.WHITE);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        loginPassword = new javax.swing.JPasswordField();
        loginUsername = new javax.swing.JTextField();
        goToSignupBtn = new javax.swing.JButton();
        loginBtn = new javax.swing.JButton();

        setBorder(null);
        setEnabled(false);

        jPanel1.setBackground(new java.awt.Color(5, 100, 153));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 22)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Welcome!");

        jLabel2.setBackground(new java.awt.Color(0, 0, 0));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bchat/res/username.png"))); // NOI18N
        jLabel2.setToolTipText("username");

        jLabel3.setBackground(new java.awt.Color(0, 0, 0));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/bchat/res/password.png"))); // NOI18N
        jLabel3.setToolTipText("password");

        loginPassword.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        loginPassword.setForeground(new java.awt.Color(51, 153, 255));
        loginPassword.setToolTipText("password");
        loginPassword.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 3, true));

        loginUsername.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        loginUsername.setForeground(new java.awt.Color(204, 204, 204));
        loginUsername.setText("Username");
        loginUsername.setToolTipText("username");
        loginUsername.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 3, true));
        loginUsername.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                loginUsernameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                loginUsernameFocusLost(evt);
            }
        });

        goToSignupBtn.setBackground(new java.awt.Color(5, 100, 153));
        goToSignupBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        goToSignupBtn.setForeground(new java.awt.Color(255, 255, 255));
        goToSignupBtn.setText("Create an account");
        goToSignupBtn.setBorder(null);
        goToSignupBtn.setBorderPainted(false);
        goToSignupBtn.setContentAreaFilled(false);
        goToSignupBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goToSignupBtnActionPerformed(evt);
            }
        });

        loginBtn.setBackground(new java.awt.Color(5, 100, 153));
        loginBtn.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        loginBtn.setForeground(new java.awt.Color(255, 255, 255));
        loginBtn.setText("LOGIN");
        loginBtn.setBorder(null);
        loginBtn.setBorderPainted(false);
        loginBtn.setContentAreaFilled(false);
        loginBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(loginUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(loginPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(goToSignupBtn)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(loginBtn)))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(loginUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(loginPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(57, 57, 57)
                .addComponent(loginBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                .addComponent(goToSignupBtn)
                .addGap(32, 32, 32))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void goToSignupBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goToSignupBtnActionPerformed
        this.setVisible(false);
        MainUser.signupFrame.setVisible(true);

        // Change title
        Window window = SwingUtilities.getWindowAncestor(this.getParent());
        JFrame frame = (JFrame) window;
        frame.setTitle("BChat - Sign up");
    }//GEN-LAST:event_goToSignupBtnActionPerformed

    private void loginBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginBtnActionPerformed
        // getting username from textbox
        String username = loginUsername.getText();
        String password = loginPassword.getText();

        // checking if fields are empty
        if (username == null || username.equals("")) {
            JOptionPane.showMessageDialog(this,
                    "<html><b>Username field required</b></html>",
                    "Entry Error",
                    JOptionPane.ERROR_MESSAGE);
            loginUsername.requestFocus();
            return;
        }

        // checking if username exists in db
        MainUser.user = UserController.INSTANCE.findByKey(username);
        if (MainUser.user != null) {
            // username exists

            // check password
            if (MainUser.user.getPassword().equals(password)) {
                // true password -> connect
                try {
                    // look up the server ref
                    if (MainUser.proxy == null) {
                        MainUser.proxy = (IServer) Naming.lookup("rmi://192.168.1.6:2005/bchat");
                    }

                    ///////////////////////
                    // LOGIN SUCCESSFULL //
                    ///////////////////////
                    
                    MainUser.proxy.reconnect(MainUser.user.getIduser(), MainUser.user);

                    // adjust the view
                    MainUser.chatBtn.setVisible(true);
                    MainUser.chatBtn.setBackground(MyColors.DARK_BLUE);
                    MainUser.groupBtn.setVisible(true);
                    MainUser.logoutBtn.setVisible(true);
                    MainUser.broadcastBtn.setVisible(true);
                    MainUser.settingBtn.setVisible(true);
                    MainUser.homeBtn.setVisible(false);

                    loginUsername.setText(null);
                    loginPassword.setText(null);
                    this.setVisible(false);

                    // add all users list from db to frames
                    addAllUsersToList();

                    // add all groups list from db to frames
                    addUserGroupsToList();

                    MainUser.allUsersFrame.setVisible(true);
                    MainUser.loggedIN = true;

                    // create thread to check for runtime changes in usersList and groupsList
                    ParallelTask task = new ParallelTask();
                    Thread thread = new Thread(task);
                    thread.start();

                    // check if current user has offline messages from each remoteUser
                    getUserOfflineMessages();

                    // check if user groups has offline messages
                    getGroupsOfflineMessages();

                    // change title
                    Window window = SwingUtilities.getWindowAncestor(this.getParent());
                    JFrame frame = (JFrame) window;
                    frame.setTitle("BChat - " + MainUser.user.getFirstName());

                } catch (RemoteException | NotBoundException | MalformedURLException ex) {
                    System.out.println(ex.getMessage());
                }
            } else {
                // wrong password -> do nothing
                JOptionPane.showMessageDialog(this,
                        "<html><b>Invalid Password</b></html>",
                        "Entry Error",
                        JOptionPane.ERROR_MESSAGE);
                loginPassword.setText("");
                loginPassword.requestFocus();
            }

        } else {
            // username does not exist -> do nothing
            JOptionPane.showMessageDialog(this,
                    "<html><b>Invalid Username</b></html>",
                    "Entry Error",
                    JOptionPane.ERROR_MESSAGE);
            loginUsername.setText("");
            loginPassword.setText("");
            loginUsername.requestFocus();
        }
    }//GEN-LAST:event_loginBtnActionPerformed

    private void addAllUsersToList() {
        try {
            for (UserImp remoteUser : UserController.INSTANCE.findAll()) {
                // if current user -> don't add to list
                if (MainUser.user.getIduser() != remoteUser.getIduser()) {
                    // add remoteUser to Jlist
                    MainUser.allUsersFrame.addToJList(remoteUser);

                    // create a chatFrame for remoteUser
                    if (!MainUser.userChatFrames.containsKey(remoteUser.getIduser())) {
                        // create frame
                        UserChatFrame tmpFrame = new UserChatFrame(remoteUser.getIduser());

                        // add it to desktopPane (desk2)
                        MainUser.desk2.add(tmpFrame);

                        // add it to hashMap of all userChatFrames
                        MainUser.userChatFrames.put(remoteUser.getIduser(), tmpFrame);
                        System.out.println("new userChatFrame added for " + remoteUser.getFirstName());
                    }
                }
            }
        } catch (SQLException | RemoteException ex) {
            System.out.println(ex.getMessage());
        }
    }

    private void addUserGroupsToList() {
        try {
            UserImp currentUser = MainUser.user;
            for (int groupId : UserGroupController.INSTANCE.getUserGroupsId(currentUser.getIduser())) {
                GroupImp group = GroupController.INSTANCE.findById(groupId);
                IGroup igroup = group;
                System.out.println("[" + currentUser.getFirstName() + "] is in group [" + group.getGroupName() + "]:");

                // create group in server
                String idComb = groupId + "-" + currentUser.getIduser();
                MainUser.proxy.createGroup(idComb, igroup);
                System.out.println("added " + idComb + " to server");

                // add to hashmap userGroups (locally)
                MainUser.userGroups.put(groupId, igroup);

                // add to Jlist
                MainUser.allGroupsFrame.addToJList(group);

                // add to chatFrame
                if (!MainUser.groupChatFrames.containsKey(groupId)) {
                    // create frame
                    GroupChatFrame tmpFrame = new GroupChatFrame(groupId);

                    // hide admin label if current user not admin
                    if (currentUser.getIduser() != group.getAdminId()) {
                        tmpFrame.adminLabel.setVisible(false);
                    }

                    // add it to desktopPane (desk2)
                    MainUser.desk2.add(tmpFrame);

                    // add it to hashMap of all groupChatFrames
                    MainUser.groupChatFrames.put(groupId, tmpFrame);
                    System.out.println("new groupChatFrame added for " + group.getGroupName());
                }
            }
        } catch (SQLException | RemoteException ex) {
            System.out.println(ex.getMessage());
        }
    }

    private void getUserOfflineMessages() {
        int receiverId = MainUser.user.getIduser();
        MainUser.userChatFrames.keySet().forEach((senderId) -> {
            try {
                // get messages from hashmap in server
                String offlineMessages = MainUser.proxy.getOfflineMessages(receiverId + "-" + senderId);

                // check if offline messages exist
                if (offlineMessages != null) {
                    // case true -> add those messages to chatArea between user & sender
                    UserChatFrame cFrame = MainUser.userChatFrames.get(senderId);
                    cFrame.chatArea.setText(offlineMessages);

                    // clear hashmap of current receiver-sender in server
                    MainUser.proxy.clearOfflineMessages(receiverId + "-" + senderId);
                }
            } catch (RemoteException ex) {
                System.out.println(ex.getMessage());
            }
        });
    }

    private void getGroupsOfflineMessages() {
        MainUser.groupChatFrames.keySet().forEach((groupId) -> {
            try {
                // get messages from hashmap in server
                String idComb = groupId + "-" + MainUser.user.getIduser();
                String offlineGroupMessages = MainUser.proxy.getGroupOfflineMessages(idComb);

                // check if offline messages exist
                if (offlineGroupMessages != null) {
                    // case true -> add those messages to chatArea of corresponding user group
                    GroupChatFrame gFrame = MainUser.groupChatFrames.get(groupId);
                    gFrame.chatArea.setText(offlineGroupMessages);

                    // clear hashmap of current receiver-sender in server
                    MainUser.proxy.clearGroupOfflineMessages(idComb);
                }
            } catch (RemoteException ex) {
                System.out.println(ex.getMessage());
            }
        });
    }

    private void loginUsernameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_loginUsernameFocusGained
        if (loginUsername.getText().equals("Username")) {
            loginUsername.setText("");
            loginUsername.setForeground(MyColors.LIGHT_BLUE);
        }
    }//GEN-LAST:event_loginUsernameFocusGained

    private void loginUsernameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_loginUsernameFocusLost
        if (loginUsername.getText().equals("")) {
            loginUsername.setText("Username");
            loginUsername.setForeground(MyColors.GRAY);
        }
    }//GEN-LAST:event_loginUsernameFocusLost


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton goToSignupBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton loginBtn;
    private javax.swing.JPasswordField loginPassword;
    public javax.swing.JTextField loginUsername;
    // End of variables declaration//GEN-END:variables
}
